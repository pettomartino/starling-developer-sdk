{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/entities/account.js","src/entities/address.js","src/entities/card.js","src/entities/contact.js","src/entities/customer.js","src/entities/mandate.js","src/entities/oauth.js","src/entities/payment.js","src/entities/savingsGoals.js","src/entities/transaction.js","src/entities/whoAmI.js","src/starling.js","src/utils/http.js","src/utils/validator.js"],"names":[],"mappings":"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","file":"starling.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import axios from 'axios';\nimport debug from 'debug';\nimport {defaultHeaders} from '../utils/http';\nimport {typeValidation} from '../utils/validator';\n\nconst log = debug('starling:account-service');\n\n/**\n * Service to interact with a customer's account\n */\nclass Account {\n\n  /**\n   * Creates an instance of the account client\n   * @param {Object} options - application config\n   */\n  constructor (options) {\n    this.options = options;\n  }\n\n  /**\n   * Retrieves a customer's account\n   * @param {string} accessToken - the oauth bearer token\n   * @return {Promise} - the http request promise\n   */\n  getAccount (accessToken) {\n    typeValidation(arguments, getAccountParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/accounts`;\n    log(`GET ${url}`);\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    });\n  }\n\n  /**\n   * Retrieves the customer's balance\n   * @param {string} accessToken - the oauth bearer token\n   * @return {Promise} - the http request promise\n   */\n  getBalance (accessToken) {\n    typeValidation(arguments, getBalanceParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/accounts/balance`;\n    log(`GET ${url}`);\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    });\n  }\n}\n\nconst getAccountParameterDefinition = [\n  {name: 'accessToken', validations: ['required', 'string']}\n  ];\n\nconst getBalanceParameterDefinition = [\n  {name: 'accessToken', validations: ['required', 'string']}\n  ];\n\nmodule.exports = Account;\n","import axios from 'axios';\nimport debug from 'debug';\nimport {defaultHeaders} from '../utils/http';\nimport {typeValidation} from '../utils/validator';\n\nconst log = debug('starling:address-service');\n\n/**\n * Service to interact with a customer address\n */\nclass Address {\n\n  /**\n   * Creates an instance of the address client\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options;\n  }\n\n  /**\n   * Retrieves a customer's address\n   * @param {string} accessToken - the oauth bearer token.\n   * @return {Promise} - the http request promise\n   */\n  getAddresses (accessToken) {\n    typeValidation(arguments, getAddressParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/addresses`;\n    log(`GET ${url}`);\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    });\n  }\n}\n\nconst getAddressParameterDefinition = [\n  {name: 'accessToken', validations: ['required', 'string']}\n  ];\n\nmodule.exports = Address;\n","import axios from 'axios';\nimport debug from 'debug';\nimport {defaultHeaders} from '../utils/http';\nimport {typeValidation} from '../utils/validator';\n\nconst log = debug('starling:card-service');\n\n/**\n * Service to interact with a customer card\n */\nclass Card {\n\n  /**\n   * Creates an instance of the client's card\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options;\n  }\n\n  /**\n   * Retrieves a customer's card\n   * @param {string} accessToken - the oauth bearer token.\n   * @return {Promise} - the http request promise\n   */\n  getCard (accessToken) {\n    typeValidation(arguments, getCardParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/cards`;\n    log(`GET ${url}`);\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    });\n  }\n}\n\nconst getCardParameterDefinition = [\n  {name: 'accessToken', validations: ['required', 'string']}\n  ];\n\nmodule.exports = Card;\n","import axios from 'axios';\nimport debug from 'debug';\nimport {defaultHeaders, postHeaders} from '../utils/http';\nimport {typeValidation} from '../utils/validator';\n\nconst log = debug('starling:contact-service');\n\n/**\n * Service to interact with a customer's contacts (payees)\n */\nclass Contact {\n\n  /**\n   * Create a new contact service\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options;\n  }\n\n  /**\n   * Gets the customer's contacts (payees)\n   * @param {string} accessToken - the oauth bearer token.\n   * @return {Promise} - the http request promise\n   */\n  getContacts (accessToken) {\n    typeValidation(arguments, getContactsParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/contacts`;\n    log(`GET ${url}`);\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    });\n  }\n\n  /**\n   * Gets a specific contact's (payee) account details\n   * @param {string} accessToken - the oauth bearer token.\n   * @param {string} contactId - the contact's ID.\n   * @return {Promise} - the http request promise\n   */\n  getContactAccount (accessToken, contactId) {\n    typeValidation(arguments, getContactAccountParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/contacts/${contactId}/accounts`;\n    log(`GET ${url}`);\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    });\n  }\n\n  /**\n   * Creates a contact (payee) for the customer\n   * @param {string} accessToken - the oauth bearer token.\n   * @param {string} name - the name of the new contact.\n   * @param {string} accountType - the account type (domestic or international).\n   * @param {string} accountNumber - the contact's bank account number.\n   * @param {string} sortCode - the contact's sort code.\n   * @param {string} customerId - the customer's ID. (optional)\n   * @return {Promise} - the http request promise\n   */\n  createContact (accessToken, name, accountType, accountNumber, sortCode, customerId) {\n    typeValidation(arguments, createContactParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/contacts`;\n    log(`POST ${url}`);\n    return axios({\n      method: 'POST',\n      url,\n      headers: postHeaders(accessToken),\n      data: JSON.stringify({\n        name,\n        accountType,\n        accountNumber,\n        sortCode,\n        customerId\n      }),\n    });\n  }\n\n\n  /**\n   * Deletes a specific contact (payee) from the customer's account\n   * @param {string} accessToken - the oauth bearer token.\n   * @param {string} contactId - the Identifier of the contact to be deleted.\n   * @return {Promise} - the http request promise\n   */\n  deleteContact (accessToken, contactId) {\n    typeValidation(arguments, deleteContactParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/contacts/${contactId}`;\n    log(`DELETE ${url}`);\n    return axios({\n      method: 'DELETE',\n      url,\n      headers: defaultHeaders(accessToken),\n    });\n  }\n}\n\nconst getContactsParameterDefinition = [\n  {name: 'accessToken', validations: ['required', 'string']}\n  ];\n\nconst getContactAccountParameterDefinition = [\n  {name: 'accessToken', validations: ['required', 'string']},\n  {name: 'contactId', validations: ['required', 'string']}\n  ];\n\nconst createContactParameterDefinition = [\n  {name: 'accessToken', validations: ['required', 'string']},\n  {name: 'name', validations: ['required', 'string']},\n  {name: 'accountType', validations: ['required', 'string']},\n  {name: 'accountNumber', validations: ['required', 'string']},\n  {name: 'sortCode', validations: ['required', 'string']},\n  {name: 'customerId', validations: ['optional', 'string']}\n  ];\n\nconst deleteContactParameterDefinition = [\n  {name: 'accessToken', validations: ['required', 'string']},\n  {name: 'contactId', validations: ['required', 'string']}\n];\n\nmodule.exports = Contact;\n","import axios from 'axios';\nimport debug from 'debug';\nimport {defaultHeaders} from '../utils/http';\nimport {typeValidation} from '../utils/validator';\n\nconst log = debug('starling:customer-service');\n\n/**\n * Service to interact with a customer\n */\nclass Customer {\n\n  /**\n   * Create a new customer service\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options;\n  }\n\n  /**\n   * Gets the customer's details\n   * @param {string} accessToken - the oauth bearer token.\n   * @return {Promise} - the http request promise\n   */\n  getCustomer (accessToken) {\n    typeValidation(arguments, getCustomerParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/customers`;\n    log(`GET ${url}`);\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    });\n  }\n}\n\nconst getCustomerParameterDefinition = [\n  {name: 'accessToken', validations: ['required', 'string']}\n  ];\n\nmodule.exports = Customer;\n","import axios from 'axios';\nimport debug from 'debug';\nimport {defaultHeaders} from '../utils/http';\nimport {typeValidation} from '../utils/validator';\n\nconst log = debug('starling:mandate-service');\n\n\n/**\n * Service to interact with a customer's transactions\n */\nclass Mandate {\n  /**\n   * Create a new transaction service\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options;\n  }\n\n  /**\n   * Gets a list of the customer's current direct debit mandates\n   * @param {string} accessToken - the oauth bearer token.\n   * @return {Promise} - the http request promise\n   */\n  listMandates (accessToken) {\n    typeValidation(arguments, listMandatesParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/direct-debit/mandates`;\n    log(`GET ${url}`);\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    });\n  }\n\n  /**\n   * Deletes specific direct debit mandate\n   * @param {string} accessToken - the oauth bearer token.\n   * @param {string} mandateId - the unique mandate ID\n   * @return {Promise} - the http request promise\n   */\n  deleteMandate (accessToken, mandateId) {\n    typeValidation(arguments, deleteMandateParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/direct-debit/mandates/${mandateId}`;\n    log(`DELETE ${url}`);\n    return axios({\n      method: 'DELETE',\n      url,\n      headers: defaultHeaders(accessToken)\n    });\n  }\n}\n\nconst listMandatesParameterDefinition = [\n  {name: 'accessToken', validations: ['required', 'string']}\n];\n\nconst deleteMandateParameterDefinition = [\n  {name: 'accessToken', validations: ['required', 'string']},\n  {name: 'mandateId', validations: ['required', 'string']}\n];\n\nmodule.exports = Mandate;\n","import axios from 'axios';\nimport debug from 'debug';\nimport {typeValidation} from '../utils/validator';\n\nconst ACCESS_TOKEN_GRANT_TYPE = 'authorization_code';\nconst REFRESH_TOKEN_GRANT_TYPE = 'refresh_token';\n\nconst log = debug('starling:oauth-service');\n\n/**\n * Service to interact with a the oauth endpoint\n */\nclass OAuth {\n\n  /**\n   * Create a new oauth service\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options;\n  }\n\n  /**\n   * Exchanges the authorization code for an access token\n   * @param {string} authorizationCode - the authorization code, acquired from the user agent after the\n   * user authenticates with starling\n   * @return {Promise} - the http request promise\n   */\n  getAccessToken (authorizationCode) {\n    typeValidation(arguments, authorizationCodeParameterDefinition);\n    return this.getOAuthToken({\n      'code': authorizationCode,\n      'grant_type': ACCESS_TOKEN_GRANT_TYPE,\n      'client_id': this.options.clientId,\n      'client_secret': this.options.clientSecret,\n      'redirect_uri': this.options.redirectUri\n    });\n  }\n\n  /**\n   * Exchanges the authorization code for an access token\n   * @param {string} refreshToken - the oauth refresh token, used when the access token\n   * expires to claim a new access token.\n   * @return {Promise} - the http request promise\n   */\n  refreshAccessToken (refreshToken) {\n    typeValidation(arguments, refreshTokenParameterDefinition);\n    return this.getOAuthToken({\n      'refresh_token': refreshToken,\n      'grant_type': REFRESH_TOKEN_GRANT_TYPE,\n      'client_id': this.options.clientId,\n      'client_secret': this.options.clientSecret\n    });\n  }\n\n  /**\n   * Gets the access token from the starling oauth endpoint\n   * @param {object} params - the query params passed to the oauth endpoint as per the oauth spec\n   * @return {Promise} - the http request promise\n   */\n  getOAuthToken (params) {\n    if (!this.options.clientId) {\n      throw Error('clientId is not configured');\n    }\n\n    if (!this.options.clientSecret) {\n      throw Error('clientSecret is not configured');\n    }\n\n    const url = `${this.options.oauthUrl}/oauth/access-token`;\n    log(`POST ${url} queryParams:${JSON.stringify(params)}`);\n\n    return axios({\n      url,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Accept: 'application/json'\n      },\n      params: params\n    });\n  }\n}\n\nconst refreshTokenParameterDefinition = [\n  {name: 'refreshToken', validations: ['required', 'string']}\n];\n\nconst authorizationCodeParameterDefinition = [\n  {name: 'authorizationCode', validations: ['required', 'string']}\n];\n\nmodule.exports = OAuth;\n","import axios from 'axios';\nimport debug from 'debug';\nimport {defaultHeaders, postHeaders} from '../utils/http';\nimport {typeValidation} from '../utils/validator';\n\nconst log = debug('starling:payment-service');\n\n\n/**\n * Service to interact with a customer's transactions\n */\nclass Payment {\n  /**\n   * Create a new transaction service\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options;\n  }\n\n  /**\n   * Makes a payment on behalf of the customer to another UK bank account using the Faster Payments network\n   * @param {string} accessToken - the oauth bearer token.\n   *  @param {string} destinationAccountUid - the account identifier of the recipient\n   * @param {string} reference - The payment reference, max. 18 characters.\n   * @param {string} amount - the amount to be send.\n   * @param {string=} currency - the currency, optional, defaults to \"GBP\".\n   * @return {Promise} - the http request promise\n   */\n  makeLocalPayment (accessToken, destinationAccountUid, reference, amount, currency) {\n    typeValidation(arguments, makeLocalPaymentParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/payments/local`;\n    log(`POST ${url}`);\n    return axios({\n      method: 'POST',\n      url,\n      headers: postHeaders(accessToken),\n      data: JSON.stringify({\n        destinationAccountUid,\n        payment: {\n          amount,\n          currency\n        },\n        reference\n      })\n    });\n  }\n\n\n  /**\n   * Lists the customer's scheduled payments\n   * @param {string} accessToken - the oauth bearer token.\n   * @return {Promise} - the http request promise\n   */\n  listScheduledPayments (accessToken) {\n    typeValidation(arguments, listScheduledPaymentsParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/payments/scheduled`;\n    log(`GET ${url}`);\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    });\n  }\n}\n\nconst makeLocalPaymentParameterDefinition = [\n  {name: 'accessToken', validations: ['required', 'string']},\n  {name: 'destinationAccountUid', validations: ['required', 'string']},\n  {name: 'reference', validations: ['required', 'string']},\n  {name: 'amount', validations: ['required', 'string']},\n  {name: 'currency', validations: ['optional', 'string']}\n];\n\nconst listScheduledPaymentsParameterDefinition = [\n  {name: 'accessToken', validations: ['required', 'string']}\n];\n\nmodule.exports = Payment;\n","import axios from 'axios';\nimport debug from 'debug';\nimport { defaultHeaders, postHeaders } from '../utils/http';\nimport { typeValidation } from '../utils/validator';\n\nconst log = debug('starling:saving-goals-service');\n\n/**\n * Service to interact with a customer's savings goals\n */\nclass SavingsGoals {\n  /**\n   * Create a new savings goal service\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options;\n  }\n\n  /**\n   * Gets a list of the customer's savings goals\n   * @param {string} accessToken - the oauth bearer token.\n   * @return {Promise} - the http request promise\n   */\n  listSavingsGoals (accessToken) {\n    typeValidation(arguments, listSavingsGoalsParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/savings-goals`;\n    log(`GET ${url}`);\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    });\n  }\n\n  /**\n   * Gets a specific savings goal\n   * @param {string} accessToken - the oauth bearer token.\n   * @param {string} savingsGoalId - the savings goal's ID.\n   * @return {Promise} - the http request promise\n   */\n  getSavingsGoal (accessToken, savingsGoalId) {\n    typeValidation(arguments, getSavingsGoalParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/savings-goals/${savingsGoalId}`;\n    log(`GET ${url}`);\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    });\n  }\n\n  /**\n   * Creates a savings goal\n   * @param {string} accessToken - the oauth bearer token.\n   * @param {string} savingsGoalId - the savings goal's ID, generate one if creating a goal.\n   * @param {string} name - the name of the new contact.\n   * @param {string} currency - the currency of the savings goal. Defaults to 'GBP'.\n   * @param {number} targetAmount - the target amount in minor units (e.g. 1234 => £12.34).\n   * @param {string} targetCurrency - the target currency, also defaults to 'GBP'.\n   * @param {string} base64EncodedPhoto - base64 encoded image to associate with the goal. (optional)\n   * @return {Promise} - the http request promise\n   */\n  createSavingsGoal (accessToken, savingsGoalId, name, currency, targetAmount, targetCurrency, base64EncodedPhoto) {\n    typeValidation(arguments, createSavingsGoalParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/savings-goals/${savingsGoalId}`;\n    log(`PUT ${url}`);\n    return axios({\n      method: 'PUT',\n      url,\n      headers: postHeaders(accessToken),\n      data: JSON.stringify({\n        name,\n        currency,\n        target: {\n          targetAmount,\n          targetCurrency\n        },\n        base64EncodedPhoto\n      })\n    });\n  }\n\n  /**\n   * Deletes specific savings goal\n   * @param {string} accessToken - the oauth bearer token.\n   * @param {string} savingsGoalId - the unique mandate ID\n   * @return {Promise} - the http request promise\n   */\n  deleteSavingsGoal (accessToken, savingsGoalId) {\n    typeValidation(arguments, deleteSavingsGoalParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/savings-goals/${savingsGoalId}`;\n    log(`DELETE ${url}`);\n    return axios({\n      method: 'DELETE',\n      url,\n      headers: defaultHeaders(accessToken)\n    });\n  }\n\n  /**\n   * Add money to a specific savings goal\n   * @param {string} accessToken - the oauth bearer token.\n   * @param {string} savingsGoalId - the savings goal's ID.\n   * @param {string} transactionId - a transaction ID for this transaction\n   * @param {number} amount - an amount in minor unit\n   * @return {Promise} - the http request promise\n   */\n  addMoneyToSavingsGoal (accessToken, savingsGoalId, transactionId, amount, currency) {\n    typeValidation(arguments, addMoneySavingsGoalParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/savings-goals/${savingsGoalId}/add-money/${transactionId}`;\n    log(`PUT ${url}`);\n    return axios({\n      method: 'PUT',\n      url,\n      headers: postHeaders(accessToken),\n      data: JSON.stringify({\n        amount: {\n          currency,\n          minorUnits: amount\n        }\n      })\n    });\n  }\n}\n\nconst listSavingsGoalsParameterDefinition = [\n  { name: 'accessToken', validations: [ 'required', 'string' ] }\n];\n\nconst getSavingsGoalParameterDefinition = [\n  { name: 'accessToken', validations: [ 'required', 'string' ] },\n  { name: 'savingsGoalId', validations: [ 'required', 'string' ] }\n];\n\nconst deleteSavingsGoalParameterDefinition = [\n  { name: 'accessToken', validations: [ 'required', 'string' ] },\n  { name: 'savingsGoalId', validations: [ 'required', 'string' ] }\n];\n\nconst createSavingsGoalParameterDefinition = [\n  { name: 'accessToken', validations: [ 'required', 'string' ] },\n  { name: 'savingsGoalId', validations: [ 'required', 'string' ] },\n  { name: 'name', validations: [ 'required', 'string' ] },\n  { name: 'currency', validations: [ 'required', 'string' ] },\n  { name: 'targetAmount', validations: [ 'optional', 'number' ] },\n  { name: 'targetCurrency', validations: [ 'optional', 'string' ] },\n  { name: 'base64EncodedPhoto', validations: [ 'optional', 'string' ] }\n];\n\nconst addMoneySavingsGoalParameterDefinition = [\n  { name: 'accessToken', validations: [ 'required', 'string' ] },\n  { name: 'savingsGoalId', validations: [ 'required', 'string' ] },\n  { name: 'transactionId', validations: [ 'required', 'string' ] },\n  { name: 'amount', validations: [ 'required', 'number' ] },\n];\n\nmodule.exports = SavingsGoals;\n","import axios from 'axios';\nimport debug from 'debug';\nimport {defaultHeaders} from '../utils/http';\nimport {typeValidation} from '../utils/validator';\n\nconst log = debug('starling:transaction-service');\n\nconst transactionSource = (source) => {\n  if (source === 'MASTER_CARD') {\n    return '/mastercard';\n  } else if (source === 'FASTER_PAYMENTS_IN') {\n    return '/fps/in';\n  } else if (source === 'FASTER_PAYMENTS_OUT') {\n    return '/fps/out';\n  } else if (source === 'DIRECT_DEBIT') {\n    return '/direct-debit';\n  } else {\n    return ''\n  }\n};\n\n/**\n * Service to interact with a customer's transactions\n */\nclass Transaction {\n  /**\n   * Create a new transaction service\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options;\n  }\n\n  /**\n   * Gets the customer's transactions over the given period\n   * @param {string} accessToken - the oauth bearer token.\n   * @param {string} fromDate - filter transactions after this date. Format: YYYY-MM-DD\n   * @param {string} toDate - filter transactions before this date. Format: YYYY-MM-DD\n   * @param {string=} source - the transaction type (e.g. faster payments, mastercard).\n   * If not specified, results are not filtered by source.\n   * @return {Promise} - the http request promise\n   */\n  getTransactions (accessToken, fromDate, toDate, source) {\n    typeValidation(arguments, getTransactionsParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/transactions${transactionSource(source)}`;\n    log(`GET ${url} from=${fromDate} to=${toDate}`);\n\n    return axios({\n      method: 'GET',\n      url,\n      params: {\n        from: fromDate,\n        to: toDate\n      },\n      headers: defaultHeaders(accessToken)\n    });\n  }\n\n  /**\n   * Gets the full details of a single transaction\n   * @param {string} accessToken - the oauth bearer token\n   * @param {string} transactionId - the unique transaction ID\n   * @param {string=} source - the transaction type (e.g. faster payments, mastercard).\n   * If not specified, only generic transaction information will be returned.\n   * @return {Promise} - the http request promise\n   */\n  getTransaction (accessToken, transactionId, source) {\n    typeValidation(arguments, getTransactionParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/transactions${transactionSource(source)}/${transactionId}`;\n    log(`GET ${url}`);\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    });\n  }\n}\n\nconst getTransactionsParameterDefinition = [\n  {name: 'accessToken', validations: ['required', 'string']},\n  {name: 'fromDate', validations: ['optional', 'string']},\n  {name: 'toDate', validations: ['optional', 'string']},\n  {name: 'source', validations: ['optional', 'string']}\n];\n\nconst getTransactionParameterDefinition = [\n  {name: 'accessToken', validations: ['required', 'string']},\n  {name: 'transactionId', validations: ['required', 'string']},\n  {name: 'source', validations: ['optional', 'string']}\n];\n\nmodule.exports = Transaction;\n","import axios from 'axios';\nimport debug from 'debug';\nimport {defaultHeaders} from '../utils/http';\nimport {typeValidation} from '../utils/validator';\n\nconst log = debug('starling:who-am-i-service');\n\n/**\n * Service to interact with the Who Am I endpoint\n */\nclass WhoAmI {\n\n  /**\n   * Creates an instance of the who am I client\n   * @param {Object} options - configuration parameters\n   */\n  constructor (options) {\n    this.options = options;\n  }\n\n  /**\n   * Retrieves the customer UUID and permissions corresponding to the access token passed\n   * @param {string} accessToken - the oauth bearer token.\n   * @return {Promise} - the http request promise\n   */\n  getMe (accessToken) {\n    typeValidation(arguments, getMeParameterDefinition);\n    const url = `${this.options.apiUrl}/api/v1/me`;\n    log(`GET ${url}`);\n\n    return axios({\n      method: 'GET',\n      url,\n      headers: defaultHeaders(accessToken)\n    });\n  }\n}\n\nconst getMeParameterDefinition = [\n  {name: 'accessToken', validations: ['required', 'string']}\n  ];\n\nmodule.exports = WhoAmI;\n","import Customer from './entities/customer';\nimport Account from './entities/account';\nimport Address from './entities/address';\nimport Transaction from './entities/transaction';\nimport Card from './entities/card';\nimport OAuth from './entities/oauth';\nimport Contact from './entities/contact';\nimport Payment from './entities/payment';\nimport Mandate from './entities/mandate';\nimport SavingsGoals from './entities/savingsGoals';\nimport WhoAmI from './entities/whoAmI';\n\n/**\n * Facade to dispatch operations to services\n */\nclass Starling {\n\n  /**\n   * Create an instance of the starling client\n   * @param {Object=} options - configuration parameters\n   */\n  constructor (options) {\n    const defaults = {\n      apiUrl: 'https://api.starlingbank.com',\n      oauthUrl: 'https://oauth.starlingbank.com',\n      clientId: '',\n      clientSecret: ''\n    };\n\n    this.config = Object.assign({}, defaults, options);\n\n    this.whoAmI = new WhoAmI(this.config);\n    this.customer = new Customer(this.config);\n    this.account = new Account(this.config);\n    this.address = new Address(this.config);\n    this.transaction = new Transaction(this.config);\n    this.payment = new Payment(this.config);\n    this.mandate = new Mandate(this.config);\n    this.contact = new Contact(this.config);\n    this.card = new Card(this.config);\n    this.savingsGoals = new SavingsGoals(this.config);\n    this.oAuth = new OAuth(this.config);\n  }\n\n  /**\n   * Gets the customer UUID and permissions corresponding to the access token passed\n   * @param {string=} accessToken - the oauth bearer token.  If not\n   * specified, the accessToken on the options object is used.\n   * @return {Promise} - the http request promise\n   */\n  getMe (accessToken = this.config.accessToken) {\n    return this.whoAmI.getMe(accessToken);\n  }\n\n  /**\n   * Gets the customer's details\n   * @param {string=} accessToken - the oauth bearer token. If not\n   * specified, the accessToken on the options object is used.\n   * @return {Promise} - the http request promise\n   */\n  getCustomer (accessToken = this.config.accessToken) {\n    return this.customer.getCustomer(accessToken);\n  }\n\n  /**\n   * Gets the customer's account details\n   * @param {string=} accessToken - the oauth bearer token.  If not\n   * specified, the accessToken on the options object is used.\n   * @return {Promise} - the http request promise\n   */\n  getAccount (accessToken = this.config.accessToken) {\n    return this.account.getAccount(accessToken);\n  }\n\n  /**\n   * Gets the customer's balance\n   * @param {string=} accessToken - the oauth bearer token.  If not\n   * specified, the accessToken on the options object is used.\n   * @return {Promise} - the http request promise\n   */\n  getBalance (accessToken = this.config.accessToken) {\n    return this.account.getBalance(accessToken);\n  }\n\n  /**\n   * Gets the customer's addresses (current and previous)\n   * @param {string=} accessToken - the oauth bearer token.  If not\n   * specified, the accessToken on the options object is used.\n   * @return {Promise} - the http request promise\n   */\n  getAddresses (accessToken = this.config.accessToken) {\n    return this.address.getAddresses(accessToken);\n  }\n\n  /**\n   * Gets the customer's transaction history\n   * @param {string=} accessToken - the oauth bearer token.  If not\n   * specified, the accessToken on the options object is used.\n   * @param {string} fromDate - filter transactions after this date. Format: YYYY-MM-DD (optional,\n   *   defaults to most recent 100 transactions)\n   * @param {string} toDate - filter transactions before this date. Format: YYYY-MM-DD (optional,\n   *   defaults to current date if not provided)\n   * @param {string=} source - the transaction type (e.g. faster payments, mastercard).\n   * If not specified, results are not filtered by source.\n   * @return {Promise} - the http request promise\n   */\n  getTransactions (accessToken = this.config.accessToken, fromDate, toDate, source) {\n    return this.transaction.getTransactions(accessToken, fromDate, toDate, source);\n  }\n\n  /**\n   * Gets the full details of a single transaction\n   * @param {string=} accessToken - the oauth bearer token.  If not\n   * specified, the accessToken on the options object is used.\n   * @param {string} transactionId - the unique transaction ID\n   * @param {string=} source - the transaction type (e.g. faster payments, mastercard).\n   * If not specified, only generic transaction information will be returned.\n   * @return {Promise} - the http request promise\n   */\n  getTransaction (accessToken = this.config.accessToken, transactionId, source) {\n    return this.transaction.getTransaction(accessToken, transactionId, source);\n  }\n\n  /**\n   * Gets the customer's current direct-debit mandates\n   * @param {string=} accessToken - the oauth bearer token.  If not\n   * specified, the accessToken on the options object is used.\n   * @return {Promise} - the http request promise\n   */\n  listMandates (accessToken = this.config.accessToken) {\n    return this.mandate.listMandates(accessToken);\n  }\n\n  /**\n   * Deletes specific direct debit mandate\n   * @param {string} accessToken - the oauth bearer token.\n   * @param {string} mandateId - the unique mandate ID\n   * @return {Promise} - the http request promise\n   */\n  deleteMandate (accessToken = this.config.accessToken, mandateId) {\n    return this.mandate.deleteMandate(accessToken, mandateId);\n  }\n\n  /**\n   * Lists the customer's scheduled payments\n   * @param {string} accessToken - the oauth bearer token.\n   * @return {Promise} - the http request promise\n   */\n  listScheduledPayments (accessToken = this.config.accessToken) {\n    return this.payment.listScheduledPayments(accessToken);\n  }\n\n  /**\n   * Makes a payment on behalf of the customer to another UK bank account using the Faster Payments network\n   * @param {string} accessToken - the oauth bearer token.\n   *  @param {string} destinationAccountUid - the account identifier of the recipient\n   * @param {string} reference - The payment reference, max. 18 characters.\n   * @param {string} amount - the amount to be send.\n   * @param {string=} currency - the currency, optional, defaults to \"GBP\".\n   * @return {Promise} - the http request promise\n   */\n  makeLocalPayment (accessToken = this.config.accessToken, destinationAccountUid, reference, amount, currency = 'GBP') {\n    return this.payment.makeLocalPayment(accessToken, destinationAccountUid, reference, amount, currency);\n  }\n\n  /**\n   * Gets the customer's contacts (payees)\n   * @param {string} accessToken - the oauth bearer token.\n   * @return {Promise} - the http request promise\n   */\n  getContacts (accessToken = this.config.accessToken) {\n    return this.contact.getContacts(accessToken);\n  }\n\n  /**\n   * Gets a specific contact (payee)\n   * @param {string} accessToken - the oauth bearer token.\n   * @param {string} contactId - the contact's ID.\n   * @return {Promise} - the http request promise\n   */\n  getContactAccount (accessToken = this.config.accessToken, contactId) {\n    return this.contact.getContactAccount(accessToken, contactId);\n  }\n\n  /**\n   * Creates a contact (payee) for the customer\n   * @param {string} accessToken - the oauth bearer token.\n   * @param {string} name - the name of the new contact.\n   * @param {string=} accountType - the account type (domestic or international), optional and defaults to\n   *   UK_ACCOUNT_AND_SORT_CODE.\n   * @param {string} accountNumber - the contact's bank account number.\n   * @param {string} sortCode - the contact's sort code.\n   * @param {string} customerId - the customer's ID.\n   * @return {Promise} - the http request promise\n   */\n  createContact (accessToken = this.config.accessToken, name, accountType = 'UK_ACCOUNT_AND_SORT_CODE', accountNumber, sortCode, customerId) {\n    return this.contact.createContact(accessToken, name, accountType, accountNumber, sortCode, customerId);\n  }\n\n  deleteContact (accessToken, contactId) {\n    return this.contact.deleteContact(accessToken, contactId);\n  }\n\n  /**\n   * Gets a list of the customer's savings goals\n   * @param {string} accessToken - the oauth bearer token.\n   * @return {Promise} - the http request promise\n   */\n  listSavingsGoals (accessToken = this.config.accessToken) {\n    return this.savingsGoals.listSavingsGoals(accessToken);\n  }\n\n  /**\n   * Gets a specific savings goal\n   * @param {string} accessToken - the oauth bearer token.\n   * @param {string} savingsGoalId - the savings goal's ID.\n   * @return {Promise} - the http request promise\n   */\n  getSavingsGoal (accessToken = this.config.accessToken, savingsGoalId) {\n    return this.savingsGoals.getSavingsGoal(accessToken, savingsGoalId);\n  }\n\n  /**\n   * Add money to a specific savings goal\n   * @param {string} accessToken - the oauth bearer token.\n   * @param {string} savingsGoalId - the savings goal's ID.\n   * @param {string} transactionId - a transaction ID for this transaction\n   * @param {number} amount - an amount in minor unit\n   * @return {Promise} - the http request promise\n   */\n  addMoneyToSavingsGoal (accessToken = this.config.accessToken, savingsGoalId, transactionId, amount, currency = 'GBP') {\n    return this.savingsGoals.addMoneyToSavingsGoal(\n      accessToken,\n      savingsGoalId,\n      transactionId,\n      amount,\n      currency\n    );\n  }\n\n  /**\n   * Creates a contact (payee) for the customer\n   * @param {string} accessToken - the oauth bearer token.\n   * @param {string} savingsGoalId - the savings goal's ID, generate one if creating a goal.\n   * @param {string} name - the name of the new contact.\n   * @param {string} currency - the currency of the savings goal. Defaults to 'GBP'.\n   * @param {number} targetAmount - the target amount in minor units (e.g. 1234 => £12.34).\n   * @param {string} targetCurrency - the target currency, also defaults to 'GBP'.\n   * @param {string} base64EncodedPhoto - base64 encoded image to associate with the goal. (optional)\n   * @return {Promise} - the http request promise\n   */\n  createSavingsGoal (accessToken = this.config.accessToken, savingsGoalId, name, currency = 'GBP',  targetAmount, targetCurrency = 'GBP', base64EncodedPhoto) {\n    return this.savingsGoals.createSavingsGoal(accessToken, savingsGoalId, name, currency,  targetAmount, targetCurrency, base64EncodedPhoto);\n  }\n\n  /**\n   * Deletes specific direct debit mandate\n   * @param {string} accessToken - the oauth bearer token.\n   * @param {string} savingsGoalId - the unique mandate ID\n   * @return {Promise} - the http request promise\n   */\n  deleteSavingsGoal (accessToken, savingsGoalId) {\n    return this.savingsGoals.deleteSavingsGoal(accessToken, savingsGoalId);\n  }\n\n  /**\n   * Gets the customer's card\n   * @param {string=} accessToken - the oauth bearer token.  If not\n   * specified, the accessToken on the options object is used.\n   * @return {Promise} - the http request promise\n   */\n  getCard (accessToken = this.config.accessToken) {\n    return this.card.getCard(accessToken);\n  }\n\n  /**\n   * Exchanges the authorization code for an access token\n   * @param {string} authorizationCode - the authorization code, acquired from the user agent after the\n   * user authenticates with starling\n   * @return {Promise} - the http request promise\n   */\n  getAccessToken (authorizationCode) {\n    return this.oAuth.getAccessToken(authorizationCode);\n  }\n\n  /**\n   * Exchanges the authorization code for an access token\n   * @param {string} refreshToken - the oauth refresh token, used to claim a new access token when the access token\n   * expires. A new refresh token is also returned.\n   * @return {Promise} - the http request promise\n   */\n  refreshAccessToken (refreshToken) {\n    return this.oAuth.refreshAccessToken(refreshToken);\n  }\n}\n\nmodule.exports = Starling;\n","export const defaultHeaders = (accessToken) => {\n  return {\n    Accept: 'application/json',\n    Authorization: `Bearer ${accessToken}`\n  };\n};\n\nexport const postHeaders = (accessToken) => {\n  return {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${accessToken}`\n  };\n};","\nconst runRules = (pos, name, rules, value) => {\n  const valueType = typeof value;\n\n  if (rules[0] == 'optional') {\n    if (value && (valueType !== rules[1])) {\n      return `${name} parameter in position ${pos} is an optional ${rules[1]} but was ${valueType}`\n    }\n  }\n  if (rules[0] == 'required') {\n    if (value && (valueType !== rules[1])) {\n      return `${name} parameter in position ${pos} is a required ${rules[1]} but was ${valueType}`\n    } else if (!value) {\n      return `${name} parameter in position ${pos} is a required ${rules[1]} but was ${value}`\n    }\n  }\n};\n\nexport const  typeValidation = (args, def) => {\n  let problems = [];\n  for (let i = 0; i < def.length; i++) {\n    const pos = i;\n    const name = def[i].name;\n    const rules = def[i].validations;\n    const value = i <= args.length ? args[i] : undefined;\n    const problem = runRules(pos, name, rules, value);\n    if (problem) problems.push(problem);\n  }\n\n  if (problems.length) {\n    throw problems;\n  }\n\n};\n\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}